// adj array
const adjectives = [ 'happy',
'good',
'bad',
'big',
'small',
'sad',
'angry',
'beautiful',
'ugly',
'rich',
'poor',
'smart',
'dumb',
'funny',
'serious',
'tall',
'short',
'young',
'old',
'strong',
'weak',
'kind',
'cruel',
'brave',
'fearful',
'clean',
'dirty',
'healthy',
'sick',
'hardworking',
'lazy',
'friendly',
'hostile',
'generous',
'stingy',
'honest',
'dishonest',
'happy',
'miserable',
'lucky',
'unlucky',
'wise',
'foolish',
'polite',
'rude',
'calm',
'nervous',
'patient',
'impatient',
'organized',
'disorganized',
'quiet',
'noisy',
'simple',
'complicated',
'humble',
'arrogant',
'shy',
'outgoing',
'optimistic',
'pessimistic',
'creative',
'dull',
'curious',
'indifferent',
'sincere',
'insincere',
'helpful',
'unhelpful',
'independent',
'dependent',
'loyal',
'disloyal',
'secure',
'insecure',
'organized',
'clumsy',
'grateful',
'ungrateful',
'logical',
'illogical',
'responsible',
'irresponsible',
'happy',
'upset',
'curious',
'boring',
'hungry',
'thirsty',
'careful',
'careless',
'modern',
'ancient',
'sensible',
'senseless',
'energetic',
'lazy',
'friendly',
'unfriendly',
'successful',
'unsuccessful',
'loving',
'hateful',
'thoughtful',
'thoughtless',
'attractive',
'unattractive',
'respectful',
'disrespectful',
'bright',
'dim',
'brilliant',
'dull',"Fresh",
"Tasty",
"Colorful",
"Fragrant",
"Spicy",
"Crunchy",
"Juicy",
"Delicious",
"Sweet",
"Sour",
"Bitter",
"Salty",
"Creamy",
"Tangy",
"Zesty",
"Savory",
"Aromatic",
"Rich",
"Velvety",
"Smooth",
"Fiery",
"Sizzling",
"Refreshing",
"Crispy",
"Flaky",
"Buttery",
"Mild",
"Tangy",
"Tart",
"Silky",
"Tender",
"Chewy",
"Spongy",
"Glazed",
"Frosty",
"Icy",
"Nutty",
"Cheesy",
"Savory",
"Peppery",
"Hot",
"Cold",
"Zingy",
"Exquisite",
"Palatable",
"Divine",
"Succulent",
"Luscious",
"Satisfying",
"Appetizing",
"Pungent",
"Robust",
"Smoky",
"Rustic",
"Delightful",
"Wholesome",
"Hearty",
"Crumbly",
"Mouthwatering",
"Irresistible",
"Scrumptious",
"Exotic",
"Homestyle",
"Gourmet",
"Flavorsome",
"Delectable",
"Yummy",
"Lip-smacking",
"Toothsome",
"Tantalizing",
"Zesty",
"Tangy",
"Sweet-smelling",
"Fragrant",
"Aromatic",
"Floral",
"Woodsy",
"Musky",
"Earthy",
"Soothing",
"Invigorating",
"Calming",
"Refreshing",
"Energizing",
"Relaxing",
"Uplifting",
"Tranquil",
"Serene",
"Revitalizing",
"Rejuvenating",
"Exhilarating",
"Restorative",
"Balmy",
"Piquant",
"Palate-pleasing",
"Crisp",
"Quenching",
"Lively",
"Sparkling",
"Bubbly"]

// nouns array
const commonNouns= [
    "apple",
    "book",
    "car",
    "dog",
    "cat",
    "house",
    "computer",
    "friend",
    "family",
    "phone",
    "city",
    "tree",
    "flower",
    "money",
    "time",
    "water",
    "food",
    "school",
    "job",
    "music",
    "movie",
    "restaurant",
    "baby",
    "game",
    "teacher",
    "student",
    "doctor",
    "patient",
    "library",
    "beach",
    "sun",
    "moon",
    "star",
    "planet",
    "ocean",
    "river",
    "mountain",
    "road",
    "park",
    "garden",
    "camera",
    "shoes",
    "shirt",
    "hat",
    "bag",
    "key",
    "door",
    "window",
    "table",
    "chair",
    "pen",
    "paper",
    "pencil",
    "watch",
    "clock",
    "phone",
    "guitar",
    "book",
    "ball",
    "toy",
    "child",
    "parent",
    "sibling",
    "birthday",
    "holiday",
    "office",
    "store",
    "restaurant",
    "kitchen",
    "bedroom",
    "bathroom",
    "gym",
    "hospital",
    "airport",
    "train",
    "bus",
    "bicycle",
    "umbrella",
    "jacket",
    "glasses",
    "hat",
    "scarf",
    "gloves",
    "umbrella",
    "backpack",
    "wallet",
    "coin",
    "ticket",
    "passport",
    "map",
    "letter",
    "email",
    "note",
    "message",
    "website",
    "song",
    "movie",
    "video",
    "photo",
    "painting",
    "sculpture",
    "book",
    "novel",
    "magazine",
    "newspaper",
    "blog",
    "friendship",
    "love",
    "happiness",
    "peace",
    "success",
    "problem",
    "solution",
    "question",
    "answer",
    "idea",
    "dream",
  ];

const randomNouns = [
"unicorn",
"spaceship",
"mystery",
"adventure",
"treasure",
"dragon",
"castle",
"jungle",
"rainbow",
"whisper",
"fireworks",
"echo",
"sunset",
"illusion",
"moonlight",
"magic",
"serenity",
"sapphire",
"obsidian",
"sunset",
"labyrinth",
"sorcerer",
"enchanted",
"journey",
"gazebo",
"mermaid",
"carousel",
"nightmare",
"phantom",
"phoenix",
"paradise",
"potion",
"mirage",
"wonderland",
"nirvana",
"specter",
"oracle",
"emerald",
"volcano",
"quasar",
"nebula",
"typhoon",
"avalanche",
"whirlpool",
"quicksand",
"spectrum",
"sundance",
"twilight",
"equinox",
"goblin",
"harmony",
"amethyst",
"serendipity",
"mystique",
"infinity",
"elysium",
"lullaby",
"cosmos",
"whisper",
"dandelion",
"paradox",
"effervescence",
"vortex",
"phantasm",
"cascade",
"mercury",
"solstice",
"illusion",
"trance",
"lagoon",
"conundrum",
"synchronicity",
"serenity",
"epiphany",
"dusk",
"dawn",
"moondust",
"chalice",
"sorcery",
"equilibrium",
"enchantment",
"oracle",
"twinkle",
"riddle",
"butterfly",
"mystery",
"mystic",
"eclipse",
"seraph",
"whim",
"elusion",
"wisp",
"stardust",
"voyage",
"aurora",
"rhapsody",
"whisper",
"sparkle",
"marvel",
"enigma",
"triumph",
"lunar",
"silhouette",
"zeppelin",
"nemesis",
"rhinestone",
"serenade",
"crescent"
];

// verbs arrays
const commonVerbs = [
    "run",
    "eat",
    "sleep",
    "work",
    "play",
    "read",
    "write",
    "talk",
    "listen",
    "sing",
    "dance",
    "study",
    "drive",
    "walk",
    "jump",
    "swim",
    "climb",
    "laugh",
    "cry",
    "smile",
    "think",
    "dream",
    "teach",
    "learn",
    "create",
    "build",
    "imagine",
    "explore",
    "travel",
    "surf",
    "ski",
    "skate",
    "bake",
    "cook",
    "clean",
    "wash",
    "paint",
    "draw",
    "watch",
    "listen",
    "help",
    "hurt",
    "love",
    "hate",
    "like",
    "dislike",
    "want",
    "need",
    "hope",
    "believe",
    "remember",
    "forget",
    "plan",
    "change",
    "start",
    "stop",
    "finish",
    "win",
    "lose",
    "improve",
    "grow",
    "reduce",
    "accept",
    "reject",
    "understand",
    "explain",
    "ask",
    "answer",
    "follow",
    "lead",
    "choose",
    "decide",
    "meet",
    "invite",
    "visit",
    "call",
    "text",
    "email",
    "chat",
    "arrive",
    "leave",
    "return",
    "borrow",
    "lend",
    "pay",
    "receive",
    "give",
    "take",
    "open",
    "close",
    "lock",
    "unlock",
    "enter",
    "exit",
    "connect",
    "disconnect",
    "drive",
    "fly",
    "sail",
    "ride",
    "run",
    "walk",
    "crawl",
    "swim",
    "dance",
    "sing",
    "jog",
    "hike",
    "climb",
    "skip",
    "hop",
    "jump",
    "slide",
    "glide",
    "skate",
    "ski",
    "skateboard",
    "cycle",
    "row",
    "paddle",
  ];
const randomVerbs = [
"sizzle",
"gallop",
"gobble",
"wiggle",
"splish-splash",
"zippity-doo",
"munch",
"whisper",
"flap",
"slurp",
"yodel",
"tango",
"moonwalk",
"swoosh",
"wobble",
"skip",
"splurge",
"sprinkle",
"noodle",
"zoom",
"bounce",
"giggle",
"shuffle",
"plop",
"disco",
"juggle",
"hula",
"frolic",
"twirl",
"jazzercise",
"wigwam",
"doodle",
"gargle",
"mosey",
"swagger",
"giddy-up",
"fluff",
"cluck",
"whirl",
"whoosh",
"flail",
"prance",
"fandango",
"dab",
"scurry",
"tip-toe",
"swivel",
"pirouette",
"splat",
"shimmy",
"scoop",
"samba",
"splatter",
"waltz",
"sprint",
"wriggle",
"fizzle",
"froth",
"wiggle",
"wobble",
"munch",
"flap",
"slurp",
"skedaddle",
"triple-jump",
"slosh",
"whirligig",
"twerk",
"boogie",
"moonbounce",
"flibbertigibbet",
"frisbee",
"skip",
"jitterbug",
"wiggly-waggly",
"yo-yo",
"jibber-jabber",
"waggle",
"hootenanny",
"whim-wham",
"frou-frou",
"kaleidoscope",
"dilly-dally",
"flim-flam",
"hobbledehoy",
"tittle-tattle",
"dingleberry",
"wobbly-gobbly",
];


// find words in common verb and replace with a random verb
function randomVerb (){
    const index = Math.floor(Math.random() * commonVerbs.length);
    return commonVerbs[index];
}

function replaceVerb(node){
    // if is a text node, map through each word
    if(node.nodeType === Node.TEXT_NODE){
        const words = node.textContent.split(/\s+/);

        const newWords = words.map(word=>{
            return commonVerbs.includes(word) ? randomVerb() : word;
        })

        node.textContent = newWords.join(' ');
    }else{
        // if not a text, traverse all its childs
        node.childNodes.forEach(replaceVerb);
    }
}

// find words in common noun and replace with a random verb
function randomNoun (){
    const index = Math.floor(Math.random() * commonNouns.length);
    return commonNouns[index];
}

function replaceNoun(node){
    // if is a text node, map through each word
    if(node.nodeType === Node.TEXT_NODE){
        const words = node.textContent.split(/\s+/);

        const newWords = words.map(word=>{
            return commonNouns.includes(word) ? randomNoun() : word;
        })

        node.textContent = newWords.join(' ');
    }else{
        // if not a text, traverse all its childs
        node.childNodes.forEach(replaceNoun);
    }
}

// find words in adjective and replace with a random adjective
function randomAdj (){
    const index = Math.floor(Math.random() * adjectives.length);
    return adjectives[index];
}

function replaceAdj(node){
    // if is a text node, map through each word
    if(node.nodeType === Node.TEXT_NODE){
        const words = node.textContent.split(/\s+/);

        const newWords = words.map(word=>{
            return adjectives.includes(word) ? randomAdj() : word;
        })

        node.textContent = newWords.join(' ');
    }else{
        // if not a text, traverse all its childs
        node.childNodes.forEach(replaceAdj);
    }
}

replaceVerb(document.body);
replaceNoun(document.body);
replaceAdj(document.body);


